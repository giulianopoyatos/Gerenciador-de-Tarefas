<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.task_management">
    <!-- io.flutter.app.FlutterApplication é um android.app.Application que
         chama FlutterMain.startInitialization(this); em seu próprio método onCreate.
         Ina maioria dos casos você pode deixar como está, mas se quiser adicionar funções é ok criar subclasses ou reimplantar 
         FlutterApplication coloque sua classe personalizada aqui. -->
         <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
         <uses-permission android:name="android.permission.VIBRATE" />
    <application
        android:name="${applicationName}"
        android:label="task_management"
        android:icon="@mipmap/ic_launcher">
        <receiver android:name="com.dexterous.flutterlocalnotifications.ScheduledNotificationBootReceiver">
    <intent-filter>
        <action android:name="android.intent.action.BOOT_COMPLETED"></action>
    </intent-filter>
</receiver>
<receiver android:name="com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver" />
        <activity
            android:name=".MainActivity"
            android:launchMode="singleTop"
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <!-- especifica um tema Android para esta atividade assim que o processo Android 
                 começar. este tema é visivel para o usuário assim que o Flutter inicializar.
                 após isto, este tema continua determinando o Background até da interface do Flutter
            -->
            <meta-data
              android:name="io.flutter.embedding.android.NormalTheme"
              android:resource="@style/NormalTheme"
              />
            <!-- Exibe uma Visualização Android que continua mostrando o Drawable da tela de inicialização
                 o Flutter desenhe seu primeiro quadro, momento em que essa tela de carregamento desaparece.
                 Uma tela de introdução é útil para evitar qualquer lacuna visual entre o fim da tela de inicialização
                 do Android e a renderização do primeiro quadro do Flutter. -->
            <meta-data
              android:name="io.flutter.embedding.android.SplashScreenDrawable"
              android:resource="@drawable/launch_background"
              />
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <!-- NÃO APAGUE esta meta-data abaixo.
             Isto é usado pela ferramenta Flutter para gerar GeneratedPluginRegistrant.java -->
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />
    </application>
</manifest>
